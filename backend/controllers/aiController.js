const axios = require('axios');
const { Design, Evaluation } = require('../models');
const config = require('../config');

// Generate a design using AI
exports.generateDesign = async (req, res) => {
  try {
    const { prompt, baseDesignId, parameters } = req.body;
    
    // If baseDesignId is provided, get the design data
    let baseDesignData = null;
    if (baseDesignId) {
      const baseDesign = await Design.findById(baseDesignId);
      if (!baseDesign) {
        return res.status(404).json({
          success: false,
          error: 'Base design not found'
        });
      }
      baseDesignData = baseDesign.designData;
    }
    
    // Call the AI service
    const aiResponse = await axios.post(`${config.aiServiceUrl}/generate`, {
      prompt,
      baseDesignData,
      parameters
    });
    
    const { imageUrl, designData } = aiResponse.data;
    
    // Create design in the database
    const design = await Design.create({
      name: `AI-Generated Design: ${prompt.substring(0, 30)}...`,
      description: `This design was AI-generated based on the prompt: "${prompt}"`,
      imageUrl,
      designData,
      creator: req.user.id,
      isAIGenerated: true
    });
    
    // Add design to user's designs
    await User.findByIdAndUpdate(
      req.user.id,
      { $push: { designs: design._id } }
    );
    
    res.status(201).json({
      success: true,
      data: design
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Server Error',
      message: error.message
    });
  }
};

// Process evaluations and generate an improved design
exports.processEvaluations = async (req, res) => {
  try {
    const { designId } = req.params;
    
    // Find the design
    const design = await Design.findById(designId);
    
    if (!design) {
      return res.status(404).json({
        success: false,
        error: 'Design not found'
      });
    }
    
    // Get all evaluations for the design
    const evaluations = await Evaluation.find({ design: designId })
      .populate('user', 'username');
    
    if (evaluations.length === 0) {
      return res.status(400).json({
        success: false,
        error: 'No evaluations found for this design'
      });
    }
    
    // Extract evaluation data
    const evaluationData = evaluations.map(evaluation => ({
      userId: evaluation.user._id,
      username: evaluation.user.username,
      rating: evaluation.rating,
      comment: evaluation.comment,
      modifications: evaluation.modifications,
      modifiedImageUrl: evaluation.modifiedImageUrl,
      modifiedDesignData: evaluation.modifiedDesignData
    }));
    
    // Call the AI service
    const aiResponse = await axios.post(`${config.aiServiceUrl}/process-evaluations`, {
      designData: design.designData,
      evaluations: evaluationData
    });
    
    const { imageUrl, designData } = aiResponse.data;
    
    // Create new improved design version
    const newDesign = await Design.create({
      name: `${design.name} (Improved v${design.version + 1})`,
      description: `This design was generated by AI based on community evaluations of the original design.`,
      imageUrl,
      designData,
      creator: req.user.id,
      isAIGenerated: true,
      version: design.version + 1,
      parentDesign: design._id,
      contributors: evaluations.map(evaluation => ({
        user: evaluation.user._id,
        contributionWeight: evaluation.rating ? evaluation.rating / 5 * 0.2 : 0.1
      }))
    });
    
    // Add design to user's designs
    await User.findByIdAndUpdate(
      req.user.id,
      { $push: { designs: newDesign._id } }
    );
    
    // Add contributors
    for (const evaluation of evaluations) {
      const contributionWeight = evaluation.rating ? evaluation.rating / 5 * 0.2 : 0.1;
      
      await User.findByIdAndUpdate(
        evaluation.user._id,
        { 
          $push: { 
            contributions: {
              design: newDesign._id,
              contributionWeight
            } 
          } 
        }
      );
    }
    
    res.status(201).json({
      success: true,
      data: newDesign
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Server Error',
      message: error.message
    });
  }
};

// Object detection
exports.detectObjects = async (req, res) => {
  try {
    const { imageUrl } = req.body;
    
    // Call the AI service
    const aiResponse = await axios.post(`${config.aiServiceUrl}/object-detection`, {
      imageUrl
    });
    
    res.status(200).json({
      success: true,
      data: aiResponse.data
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Server Error',
      message: error.message
    });
  }
};

// Texture rendering
exports.renderTexture = async (req, res) => {
  try {
    const { objectData, textureType, textureParams } = req.body;
    
    // Call the AI service
    const aiResponse = await axios.post(`${config.aiServiceUrl}/render-texture`, {
      objectData,
      textureType,
      textureParams
    });
    
    res.status(200).json({
      success: true,
      data: aiResponse.data
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Server Error',
      message: error.message
    });
  }
};

// Apply design to 3D model
exports.applyToModel = async (req, res) => {
  try {
    const { designData, modelType, poseParams } = req.body;
    
    // Call the AI service
    const aiResponse = await axios.post(`${config.aiServiceUrl}/apply-to-model`, {
      designData,
      modelType,
      poseParams
    });
    
    res.status(200).json({
      success: true,
      data: aiResponse.data
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Server Error',
      message: error.message
    });
  }
};

// Extract clothing pattern
exports.extractPattern = async (req, res) => {
  try {
    const { designData } = req.body;
    
    // Call the AI service
    const aiResponse = await axios.post(`${config.aiServiceUrl}/extract-pattern`, {
      designData
    });
    
    res.status(200).json({
      success: true,
      data: aiResponse.data
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Server Error',
      message: error.message
    });
  }
};
